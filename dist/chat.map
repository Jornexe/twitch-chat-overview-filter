{"version":3,"file":"chat.js","mappingssources":["webpack://twitch-chat-overview/./src/main/scriChat.js"],"sourcesContent":["console.log(\"YEEEEEEEEEEEET\", document.getElementById(\"altChatDiv\"));\r\ndocument.addEventListener(\"DOMContentLoaded\", loaded(), false);\r\nwindow.addEventListener(\"popstate\", function () {\r\n    console.log(\"popstate called! ==========================================\");\r\n}, false);\r\nwindow.addEventListener(\"locationchange\", function () {\r\n    console.log(\"locationchange called! ==========================================\");\r\n}, false);\r\n// fix the event so it calls when switching to another channel and not just on reload or first page load.\r\n\r\n// adds easier identification and creates dupe target.\r\nfunction loaded() {\r\n    console.log(\"LOADED CALLLED ----> \", document.readyState);\r\n    if (document.readyState === \"interactive\") {\r\n        if (document.getElementById(\"altChatDiv\") === null) {\r\n            console.log(\"YEEEEEEEEEEEEEE IT WOOOORSSSSSSSSSSSKKKK\");\r\n\r\n            // sets up id for copying chat to filter\r\n            document.querySelectorAll('[role=\"log\"]').forEach(function (x) {\r\n                x.setAttribute(\"id\", \"chatLogDefault\");\r\n            });\r\n            // creates filtered chat box\r\n            locate = document.getElementsByClassName(\"gzJAxw\");\r\n            altChatDiv = document.createElement(\"div\");\r\n            altChatDiv.setAttribute(\"id\", \"altChatDiv\");\r\n            altChatDiv.setAttribute(\r\n                \"style\",\r\n                \"height: 30%; position: relative; overflow-y: auto; overflow-x: hidden;\"\r\n            );\r\n            Array.prototype.forEach.call(locate, function (x) {\r\n                x.prepend(altChatDiv);\r\n            });\r\n            welcome1 = document.createElement(\"span\");\r\n            welcome1.setAttribute(\"class\", \"CoreText-sc-cpl358-0 Layout-sc-nxg1ff-0 chat-line__status\");\r\n            welcome1.innerHTML = \"Welcome to the filter!\";\r\n            altChatDiv.appendChild(welcome1);\r\n            Array.prototype.forEach.call(\r\n                document.getElementsByClassName(\"ejGzhU\"),\r\n                function (x) {\r\n                    x.setAttribute(\"style\", \"height: 40% !important\");\r\n                }\r\n            );\r\n            console.log(\"YEEEEEEEEEEEET\", document.getElementById(\"altChatDiv\"));\r\n            setupListener();\r\n        }\r\n    }\r\n}\r\n\r\n// add variable here after inserting it in options.html\r\n// var must have same name as id\r\n// temp variables\r\nvip = true;\r\nmod = true;\r\nverified = true;\r\nprime = true;\r\nantiSpam = true;\r\nsubbed = true;\r\nminsub = 999999999;\r\nminSubGift = true;\r\nminSubGiftAmount = 999999999;\r\nminCheerMsg = true;\r\nminCheerMsgAmount = 999999999;\r\nminCheerBadge = true;\r\nminCheerBadgeAmount = 999999999;\r\n\r\n// updates local variables to match client settings on startup\r\nchrome.storage.sync.get(null, function (itemsOBJ) {\r\n    for (var storKey in itemsOBJ) {\r\n        if (itemsOBJ.hasOwnProperty(storKey)) {\r\n            // console.log(storKey, itemsOBJ[storKey]);\r\n            window[storKey] = itemsOBJ[storKey];\r\n        }\r\n    }\r\n});\r\n\r\n// updates local variables when they are changed\r\nchrome.storage.onChanged.addListener(function (storag) {\r\n    window[Object.keys(storag)[0]] = Object.values(Object.values(storag)[0])[0];\r\n    console.log(Object.keys(storag)[0], \"updated to\", Object.values(Object.values(storag)[0])[0]);\r\n});\r\n\r\n// REWORKED NODE INSERTER\r\nfunction setupListener() {\r\n    // easier use\r\n    altChatDivId = document.getElementById(\"altChatDiv\");\r\n    chatLogDefault = document.getElementById(\"chatLogDefault\");\r\n    // checks for new messages in chat\r\n    chatLogDefault.addEventListener(\"DOMNodeInserted\", function () {\r\n        // Gets all information about message\r\n\r\n        if (chatLogDefault.lastChild.lastChild != \"undefined\" && chatLogDefault.lastChild.lastChild != null) {\r\n            var child = chatLogDefault.lastChild.lastChild;\r\n            // ADD: user defined chat filter <--------------\r\n            // this does not work properly\r\n            // if ( Array.prototype.forEach.call(child.getElementsByClassName(\"chat-badge\"), function (x) {\r\n            //     at = x.getAttribute(\"alt\");\r\n            //     console.log(vip, mod, [\"VIP\", \"Moderator\"].includes(at));\r\n            //     if (vip || mod) if ( (at == \"VIP\" && vip) || ( at == \"Moderator\" && mod)) { return false } else return true\r\n            // })) {return}\r\n            if (vip || mod || verified) {\r\n                checkBadge = [];\r\n                for (let i = 0, arr = child.getElementsByClassName(\"chat-badge\"); i < arr.length; i++){\r\n                    // console.log(arr[i]);\r\n                    arrTib = arr[i].getAttribute(\"alt\");\r\n                    if ( arrTib == \"VIP\" && vip){\r\n                        checkBadge.push(true);\r\n                    }\r\n                    else if (arrTib == \"Moderator\" && mod){\r\n                        checkBadge.push(true);\r\n                    }\r\n                    else if (arrTib == \"Verified\" && verified){\r\n                        checkBadge.push(true);\r\n                    }\r\n                    else if (arrTib == \"Prime Gaming\" && prime){\r\n                        checkBadge.push(true);\r\n                    }   \r\n                    else checkBadge.push(false);\r\n                }\r\n                if (checkBadge.includes(true)) {} else return;\r\n            }\r\n            // ADD: user defined chat filter <--------------\r\n            // check if object is from a client. \r\n            if (child.getElementsByClassName(\"chat-author__display-name\")[0] != \"undefined\" && child.getElementsByClassName(\"chat-author__display-name\")[0] != null) {\r\n                var childName = child.getElementsByClassName(\"chat-author__display-name\")[0].textContent;\r\n                // class: seventv-message-context\r\n                // gets all message content\r\n                var childContent = \"\";\r\n                if (child.getElementsByClassName(\"seventv-message-context\") != \"undefined\" && child.getElementsByClassName(\"seventv-message-context\") != null) {\r\n                    for (let y of child.getElementsByClassName(\"seventv-message-context\")) {\r\n                        for (let x of y.children) {\r\n                            if (x.classList.contains(\"seventv-emote\")) {\r\n                                childContent += x.children[0].children[0].getAttribute(\"alt\");\r\n                            }\r\n                            else if (x.children[0] && x.children[0].nodeName == \"IMG\") {\r\n                                //console.log(\"IMG\", x)\r\n                                childContent += x.children[0].getAttribute(\"alt\");\r\n                            }\r\n                            else if (x.textContent) {\r\n                                childContent += x.textContent;\r\n                            }\r\n                            else {\r\n                                childContent += \"--\";\r\n                            }\r\n                        }\r\n                    }\r\n                }\r\n                if (child.getElementsByClassName(\"chat-line__timestamp\")[0].textContent != null) {\r\n                    var childTStamp = child.getElementsByClassName(\"chat-line__timestamp\")[0].textContent;\r\n                }\r\n                else {\r\n                    var childTStamp = \"-NO-TIMESTAMP-\";\r\n                }\r\n            }\r\n        }\r\n        else return;\r\n        // Ensures that these variables actually exist\r\n        if (childName && childContent && childTStamp) {\r\n            // COPIES FROM MAIN CHAT TO FILTERED CHAT WINDOW\r\n            if (!document.getElementById(childName + childContent + childTStamp)) {\r\n                cchild = child.cloneNode(true);\r\n                cchild.setAttribute(\"id\", childName + childContent + childTStamp);\r\n                altChatDivId.appendChild(cchild);\r\n                updateScroll();\r\n                // Removes elements from altchat\r\n                if (altChatDivId.children.length >= 100) {\r\n                    altChatDivId.removeChild(altChatDivId.children[0]);\r\n                }\r\n            }\r\n        }\r\n    },\r\n        false\r\n    );\r\n}\r\n\r\n// needs rework\r\nfunction updateScroll() {\r\n    if (altChatDivId.scrollHeight - altChatDivId.clientHeight <= altChatDivId.scrollTop + 500) {\r\n        altChatDivId.scrollTop = altChatDivId.scrollHeight;\r\n    }\r\n}\r\n\r\n// jCgbLy\r\n// gzJAxw\r\n// ejGzhU <- user message\r\n"],"names":[],"sourceRoot":""}